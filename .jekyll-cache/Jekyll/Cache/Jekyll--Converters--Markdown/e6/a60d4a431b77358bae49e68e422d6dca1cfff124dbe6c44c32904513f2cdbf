I"i<p>This one isn’t quite as one-line (at all!) as my Ruby implementation. But it
does handle errors nicer.  I both love and hate that Haskell doesn’t let you just
skim past errors. You’ve gotta unwrap your potential errors and handle both cases.</p>

<p>But even with that, the code ended up short, and I think fairly easy to follow.</p>

<p>I bet there are ways to shorten it up further too. I sort of want to use the
Either monad to make the error handling cleaner, except then I’d have to switch
the Maybe result out of Lens-Aeson into a “fuller” Either type.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">{-# LANGUAGE OverloadedStrings #-}</span>

<span class="kr">import</span> <span class="nn">Control.Lens</span>
<span class="kr">import</span> <span class="nn">Control.Lens.Aeson</span>
<span class="kr">import</span> <span class="nn">Data.Aeson</span> <span class="p">(</span><span class="kt">Value</span><span class="p">(</span><span class="kt">String</span><span class="p">))</span>
<span class="kr">import</span> <span class="nn">System.Exit</span>
<span class="kr">import</span> <span class="k">qualified</span> <span class="nn">Data.Text</span> <span class="k">as</span> <span class="n">T</span>
<span class="kr">import</span> <span class="k">qualified</span> <span class="nn">Network.Curl.Download</span> <span class="k">as</span> <span class="n">Curl</span>

<span class="n">main</span> <span class="o">::</span> <span class="kt">IO</span> <span class="nb">()</span>
<span class="n">main</span> <span class="o">=</span> <span class="kr">do</span>
  <span class="c1">-- Fetch the whole page</span>
  <span class="n">result</span> <span class="o">&lt;-</span> <span class="kt">Curl</span><span class="o">.</span><span class="n">openURIString</span> <span class="s">"https://coinbase.com"</span>

  <span class="kr">case</span> <span class="n">result</span> <span class="kr">of</span>
    <span class="kt">Left</span> <span class="n">e</span> <span class="o">-&gt;</span> <span class="kr">do</span>
      <span class="n">putStrLn</span> <span class="s">"Failed fetching page!"</span>
      <span class="n">putStrLn</span> <span class="n">e</span>
      <span class="n">exitFailure</span>
    <span class="kt">Right</span> <span class="n">s</span> <span class="o">-&gt;</span>
      <span class="c1">-- Use lens-aeson to grab out the key we want. It comes out in several</span>
      <span class="c1">-- layers of wrappers, so undo them to get a float out, suitable to print.</span>
      <span class="kr">case</span> <span class="p">(</span><span class="kt">T</span><span class="o">.</span><span class="n">unpack</span> <span class="o">.</span> <span class="n">strip</span> <span class="o">.</span> <span class="n">findLine</span><span class="p">)</span> <span class="n">s</span> <span class="o">^?</span> <span class="n">key</span> <span class="s">"btc_to_usd"</span> <span class="kr">of</span>
        <span class="kt">Just</span> <span class="p">(</span><span class="kt">String</span> <span class="n">val</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">print</span> <span class="p">(</span><span class="n">read</span> <span class="o">$</span> <span class="kt">T</span><span class="o">.</span><span class="n">unpack</span> <span class="n">val</span> <span class="o">::</span> <span class="kt">Float</span><span class="p">)</span>
        <span class="kt">Nothing</span>           <span class="o">-&gt;</span> <span class="n">putStrLn</span> <span class="o">$</span> <span class="s">"Misparse of JSON: "</span> <span class="o">++</span> <span class="n">s</span>
      <span class="kr">where</span>
        <span class="c1">-- Grab the first line that has this text in it.</span>
        <span class="n">findLine</span> <span class="n">html</span> <span class="o">=</span> <span class="n">head</span> <span class="o">$</span> <span class="n">filter</span> <span class="p">(</span><span class="kt">T</span><span class="o">.</span><span class="n">isInfixOf</span> <span class="s">"exchangeRates"</span><span class="p">)</span> <span class="p">(</span><span class="kt">T</span><span class="o">.</span><span class="n">lines</span> <span class="o">$</span> <span class="kt">T</span><span class="o">.</span><span class="n">pack</span> <span class="n">html</span><span class="p">)</span>

        <span class="c1">-- Strip the stuff before &amp; after the curlies.</span>
        <span class="n">strip</span> <span class="o">::</span> <span class="kt">T</span><span class="o">.</span><span class="kt">Text</span> <span class="o">-&gt;</span> <span class="kt">T</span><span class="o">.</span><span class="kt">Text</span>
        <span class="n">strip</span> <span class="o">=</span> <span class="kt">T</span><span class="o">.</span><span class="n">dropWhile</span> <span class="p">(</span><span class="o">/=</span> <span class="sc">'{'</span><span class="p">)</span> <span class="o">.</span> <span class="kt">T</span><span class="o">.</span><span class="n">dropWhileEnd</span> <span class="p">(</span> <span class="o">/=</span> <span class="sc">'}'</span><span class="p">)</span>
</code></pre></div></div>
:ET